// #include <stdio.h>
// #include <string.h>
// #include <time.h>
// #include "esp_wifi.h"
// #include "esp_event.h"
// #include "esp_log.h"
// #include "esp_vfs_fat.h"
// #include "nvs_flash.h"
// #include "lwip/err.h"
// #include "lwip/sockets.h"
// #include "lwip/sys.h"
// #include "lwip/netdb.h"
// #include "driver/sdmmc_host.h"
// #include "driver/sdmmc_defs.h"
// #include "sdmmc_cmd.h"
// #include "esp_wpa2.h"
//
// // Wi-Fi credentials - Regular and Enterprise
// #define WIFI_SSID "MacEwanSecure"       // School network SSID
// #define WIFI_USERNAME "mohameda94"      // Enterprise username
// #define WIFI_PASSWORD "Shoegame101365!" // Enterprise password
//
// // SoftAP credentials (unchanged)
// #define AP_SSID "ESP32_AP"
// #define AP_PASSWORD "12345678"
//
// // Server Port, File write location, and buffer size (unchanged)
// #define PORT 5000
// #define MOUNT_POINT "/sdcard"
// #define BUFFER_SIZE 1024  // Size of each buffer
// #define MAX_FILE_SIZE 4096  // Maximum write size
//
// // File Configurations (unchanged)
// #define SD_CLK_PIN   GPIO_NUM_14   // CLK pin (adjust for your board)
// #define SD_CMD_PIN   GPIO_NUM_15   // CMD pin
// #define SD_D0_PIN    GPIO_NUM_2    // D0 pin (data line 0)
// // For 4-bit mode, also define D1-D3:
// #define SD_D1_PIN    GPIO_NUM_4
// #define SD_D2_PIN    GPIO_NUM_12
// #define SD_D3_PIN    GPIO_NUM_13
//
// static uint8_t read_buffer[BUFFER_SIZE];  // Buffer for reading incoming data
// static uint8_t write_buffer[MAX_FILE_SIZE];  // Buffer for storing file data
// static size_t write_buffer_index = 0;  // Current position in the write buffer
// typedef struct {
//     int client_socket; // Socket for client communication
//     char *filepath;
// } TaskParams;
// static const char *TAG = "TCP_SERVER";
//
// // Function to initialize Wi-Fi in Enterprise mode
// static void wifi_init_enterprise() {
//     ESP_LOGI(TAG, "Initializing Wi-Fi in Enterprise mode for %s", WIFI_SSID);
//
//     // Enterprise Wi-Fi configuration
//     wifi_config_t wifi_config = {
//         .sta = {
//             .ssid = WIFI_SSID,
//             .password = WIFI_PASSWORD, // This holds the password for both regular and enterprise
//             .threshold.authmode = WIFI_AUTH_WPA2_ENTERPRISE,
//             .pmf_cfg = {
//                 .capable = true,
//                 .required = false
//             },
//         },
//     };
//
//     // Set the Wi-Fi configuration
//     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
//     ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config));
//
//     // Configure enterprise identity
//     ESP_ERROR_CHECK(esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)WIFI_USERNAME, strlen(WIFI_USERNAME)));
//     ESP_ERROR_CHECK(esp_wifi_sta_wpa2_ent_set_username((uint8_t *)WIFI_USERNAME, strlen(WIFI_USERNAME)));
//     ESP_ERROR_CHECK(esp_wifi_sta_wpa2_ent_set_password((uint8_t *)WIFI_PASSWORD, strlen(WIFI_PASSWORD)));
//
//     // Enable WPA2 enterprise
//     ESP_ERROR_CHECK(esp_wifi_sta_wpa2_ent_enable());
//
//     // Start WiFi
//     ESP_ERROR_CHECK(esp_wifi_start());
//     ESP_LOGI(TAG, "Enterprise Wi-Fi initialized. Connecting to %s...", WIFI_SSID);
//
//     // Wait for Wi-Fi connection
//     int retry_count = 0;
//     ESP_ERROR_CHECK(esp_wifi_connect());
//
//     // Wait for IP address
//     esp_netif_ip_info_t ip_info;
//     esp_netif_t *netif = esp_netif_get_handle_from_ifkey("WIFI_STA_DEF");
//     while (1) {
//         if (esp_netif_get_ip_info(netif, &ip_info) == ESP_OK) {
//             if (ip_info.ip.addr != 0) {
//                 ESP_LOGI(TAG, "Connected to Wi-Fi");
//                 ESP_LOGI(TAG, "IP Address: " IPSTR, IP2STR(&ip_info.ip));
//                 break;
//             }
//         }
//         vTaskDelay(1000 / portTICK_PERIOD_MS);
//         retry_count++;
//         if (retry_count > 20) {
//             ESP_LOGE(TAG, "Failed to get IP address, retrying connection...");
//             esp_wifi_disconnect();
//             vTaskDelay(1000 / portTICK_PERIOD_MS);
//             esp_wifi_connect();
//             retry_count = 0;
//         }
//     }
// }
//
// // Function to initialize Wi-Fi in SoftAP mode (unchanged)
// static void wifi_init_softap() {
//     wifi_config_t wifi_config = {
//         .ap = {
//             .ssid = AP_SSID,
//             .password = AP_PASSWORD,
//             .max_connection = 4,
//             .authmode = WIFI_AUTH_WPA2_PSK,
//         },
//     };
//
//     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));
//     ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_AP, &wifi_config));
//     ESP_ERROR_CHECK(esp_wifi_start());
//
//     ESP_LOGI(TAG, "Wi-Fi SoftAP initialized. SSID: %s, Password: %s", AP_SSID, AP_PASSWORD);
// }
//
// static esp_err_t init_sd_card() {
//     esp_err_t ret;
//
//     // SDMMC host configuration
//     sdmmc_host_t host = SDMMC_HOST_DEFAULT();
//     // Follow schematics for sdmmc, use 1-bit mode if wroom
//     // SDMMC slot configuration (GPIO pins)
//     sdmmc_slot_config_t slot_config = SDMMC_SLOT_CONFIG_DEFAULT();
//     slot_config.clk = SD_CLK_PIN;
//     slot_config.cmd = SD_CMD_PIN;
//     slot_config.d0 = SD_D0_PIN;
//     slot_config.d1 = SD_D1_PIN;  // Only needed for 4-bit mode
//     slot_config.d2 = SD_D2_PIN;  // Only needed for 4-bit mode
//     slot_config.d3 = SD_D3_PIN;  // Only needed for 4-bit mode
//     slot_config.width = 1;       // Use 1 bit mode if you have wroom esp32 4 bit only supported wrover
//     // Mount the filesystem
//     esp_vfs_fat_sdmmc_mount_config_t mount_config = {
//         .format_if_mount_failed = false,
//         .max_files = 10,
//         .allocation_unit_size = 0
//     };
//
//     sdmmc_card_t *card;
//     ret = esp_vfs_fat_sdmmc_mount(MOUNT_POINT, &host, &slot_config, &mount_config, &card);
//
//     if (ret != ESP_OK) {
//         if (ret == ESP_FAIL) {
//             ESP_LOGE(TAG,"Failed to mount filesystem. Make sure the SD card is formatted with FAT.");
//         } else {
//             ESP_LOGE(TAG, "Failed to initialize the SD card (%s).", esp_err_to_name(ret));
//         }
//         return ret;
//     }
//
//     ESP_LOGI(TAG, "SD card initialized and mounted at %s", MOUNT_POINT);
//     return ESP_OK;
// }
//
// static void tcp_server_write(void *pvParameters) {
//     TaskParams *params = (TaskParams *)pvParameters;
//     int client_socket = params->client_socket;
//     char *filepath = params->filepath;
//     char response[256];
//
//     struct timeval timeout;
//     timeout.tv_sec = 30;  
//     timeout.tv_usec = 0;
//     setsockopt(client_socket, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));
//
//     FILE *file = fopen(filepath, "wb");
//     if (!file) {
//         ESP_LOGE(TAG, "Failed to open file: %s", filepath);
//         sprintf(response, "File: %s not found", filepath);
//         send(client_socket, response, strlen(response), 0);
//     }
//     else {
//         sprintf(response, "OK");
//         send(client_socket, response, strlen(response), 0);
//
//         size_t total_bytes_received = 0;
//         bool transfer_complete = false;
//
//         while (!transfer_complete) {
//             int len = recv(client_socket, read_buffer, BUFFER_SIZE, 0);
//             if (len < 0) {
//                 if (errno == EWOULDBLOCK || errno == EAGAIN) {
//                     ESP_LOGW(TAG, "Receive timeout");
//                     // If we've received data but hit a timeout, consider transfer complete
//                     if (total_bytes_received > 0) {
//                         transfer_complete = true;
//                     } else {
//                         break;
//                     }
//                 } else {
//                     ESP_LOGE(TAG, "Receive failed: errno %d", errno);
//                     break;
//                 }
//             } else if (len == 0) {
//                 ESP_LOGI(TAG, "Client disconnected");
//                 // If we've received some data before disconnect, consider transfer complete
//                 if (total_bytes_received > 0) {
//                     transfer_complete = true;
//                 }
//                 break;
//             } else {
//                 // Write to SD card
//                 size_t bytes_written = fwrite(read_buffer, 1, len, file);
//                 if (bytes_written != len) {
//                     ESP_LOGE(TAG, "Failed to write all data to file");
//                     break;
//                 }
//
//                 total_bytes_received += len;
//
//                 // Flush after every write to ensure data is saved
//                 fflush(file);
//
//                 // If received less than buffer size, might be done
//                 if (len < BUFFER_SIZE) {
//                     // Small delay to see if more data is coming
//                     vTaskDelay(10 / portTICK_PERIOD_MS);
//
//                     // Check if there's more data to receive
//                     fd_set readset;
//                     FD_ZERO(&readset);
//                     FD_SET(client_socket, &readset);
//
//                     struct timeval quick_timeout;
//                     quick_timeout.tv_sec = 0;
//                     quick_timeout.tv_usec = 500000; // 500ms
//
//                     if (select(client_socket + 1, &readset, NULL, NULL, &quick_timeout) <= 0) {
//                         // No more data, transfer complete
//                         transfer_complete = true;
//                     }
//                 }
//             }
//         }
//
//         // Send completion acknowledgment
//         if (total_bytes_received > 0) {
//             ESP_LOGI(TAG, "File transfer complete, received %d bytes", total_bytes_received);
//             sprintf(response, "UPLOAD_COMPLETE");
//             send(client_socket, response, strlen(response), 0);
//         }
//     }
//
//     // Clean up
//     if (file) {
//         fclose(file);
//     }
//
//     // Give the client a moment to receive the completion message
//     vTaskDelay(100 / portTICK_PERIOD_MS);
//
//     close(client_socket); // Close the socket
//     free(params);         // Free the struct
//     vTaskDelete(NULL);    // Delete this task
// }
//
// static void tcp_server_read(void *pvParameters) {
//     TaskParams *params = (TaskParams *)pvParameters;
//     int client_socket = params->client_socket;
//     char *filepath = params->filepath;
//     char response[256];
//     FILE *file = fopen(filepath, "rb"); // Takes filepath might have to prefix with /sd
//     if (!file) {
//         ESP_LOGE(TAG, "Failed to open file: %s", filepath);
//     }
//     else{
//         while (1) {
//             int len = fread(read_buffer, 1, BUFFER_SIZE, file);
//             if (len < 0) {
//                 ESP_LOGE(TAG, "Read from SD card failed");
//                 break;
//             } else if (len == 0) {
//                 ESP_LOGI(TAG, "End of file reached");
//                 break;
//             } else {
//                 int sent = send(client_socket, read_buffer, len, 0);
//                 if (sent < 0) {
//                     if (errno == EWOULDBLOCK || errno == EAGAIN) {
//                         ESP_LOGW(TAG, "Send timeout");
//                         break;
//                     } else {
//                         ESP_LOGE(TAG, "Send failed: errno %d", errno);
//                         break;
//                     }
//                 } else if (sent == 0) {
//                     ESP_LOGI(TAG, "Client disconnected");
//                     break;
//                 } else if (sent < len) {
//                     ESP_LOGW(TAG, "Partial send, %d bytes sent out of %d", sent, len);
//                 }
//             }
//         }
//     }
//     fclose(file);
//     close(client_socket); // Close the socket
//     free(params);         // Free the struct
//     vTaskDelete(NULL);    // Delete this task
// }
//
// static void tcp_server_delete(void *pvParameters) {
//     TaskParams *params = (TaskParams *)pvParameters;
//     int client_socket = params->client_socket;
//     char *filepath = params->filepath;
//     char response[256];
//     if (!remove(filepath) == 0) {
//         sprintf(response, "File: %s not found", filepath);
//         send(client_socket, response, strlen(response), 0);
//         ESP_LOGE(TAG, "Failed to delete file: %s", filepath);
//     }
//     else{
//         sprintf(response, "OK");
//         send(client_socket, response, strlen(response) - 1, 0);
//     }
//     close(client_socket); // Close the socket
//     free(params);         // Free the struct
//     vTaskDelete(NULL);    // Delete this task
// }
//
// void serverTask(void * pvParameters) {
//     // standard initalization for esp32 flash storage, wifi init, etc
//     esp_err_t ret = nvs_flash_init();
//     if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
//         ESP_ERROR_CHECK(nvs_flash_erase());
//         ret = nvs_flash_init();
//     }
//     ESP_ERROR_CHECK(ret);
//
//     // Initialize Wi-Fi
//     ESP_ERROR_CHECK(esp_netif_init());
//     ESP_ERROR_CHECK(esp_event_loop_create_default());
//     esp_netif_create_default_wifi_sta();
//     esp_netif_create_default_wifi_ap();
//
//     wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
//     ESP_ERROR_CHECK(esp_wifi_init(&cfg));
//
//     // Connect to enterprise Wi-Fi network
//     wifi_init_enterprise();
//
//     // Optional: Uncomment if you also want AP mode along with STA
//     // ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_APSTA));
//     // wifi_init_softap();
//
//     // Begins socket creation of on server and waits for incomming connection to begin server loop.
//     int addr_family = AF_INET;
//     int ip_protocol = IPPROTO_IP;
//
//     // Initialize the SD card once at task start
//     if (init_sd_card() != ESP_OK) {
//         vTaskDelete(NULL);
//     }
//
//     // File configuration
//     char filename[247];
//     char filepath[256];
//     char response[256];
//     char command[16];
//
//     // Create a socket
//     int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
//     if (listen_sock < 0) {
//         ESP_LOGE(TAG, "Unable to create socket: errno %d", errno);
//         vTaskDelete(NULL);
//     }
//
//     // Bind the socket
//     struct sockaddr_in server_addr;
//     server_addr.sin_family = AF_INET;
//     server_addr.sin_port = htons(PORT);
//     server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
//     if (bind(listen_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
//         ESP_LOGE(TAG, "Socket bind failed: errno %d", errno);
//         close(listen_sock);
//         vTaskDelete(NULL);
//     }
//
//     // Listen for incoming connections
//     if (listen(listen_sock, 5) < 0) {
//         ESP_LOGE(TAG, "Socket listen failed: errno %d", errno);
//         close(listen_sock);
//         vTaskDelete(NULL);
//     }
//     ESP_LOGI(TAG, "TCP server listening on port %d", PORT);
//
//     // Main Server loop. Creates socket and makes a connection. Waits for command for read/write/delete
//     while (1) {
//         // Accept incoming connection
//         struct sockaddr_in client_addr;
//         socklen_t client_addr_len = sizeof(client_addr);
//         int client_socket = accept(listen_sock, (struct sockaddr *)&client_addr, &client_addr_len);
//         if (client_socket < 0) {
//             ESP_LOGE(TAG, "Unable to accept connection: errno %d", errno);
//             continue;
//         }
//         ESP_LOGI(TAG, "New client connected");
//
//         // Receive the filename from the client
//         int len = recv(client_socket, filename, sizeof(filename) - 1, 0);
//         if (len < 0) {
//             ESP_LOGE(TAG, "Failed to receive filename: errno %d", errno);
//             close(client_socket);
//             continue;
//         }
//         filename[len] = '\0'; // End of Filename
//         ESP_LOGI(TAG, "Requested file:%s", filename);
//
//         // Open the requested file from the SD card
//         snprintf(filepath, sizeof(filepath), "/sdcard/%s", filename); // Assuming files are stored in /sdcard/
//         sprintf(response, "Filename received successfully");
//         send(client_socket, response, strlen(response), 0);
//
//         // Receive task command from client. Run the specified task then return to server loop.
//         int command_len = recv(client_socket, command, sizeof(command) - 1, 0);
//         if (len < 0) {
//             ESP_LOGE(TAG, "Failed to receive command: errno %d", errno);
//             close(client_socket);
//             continue;
//         }
//         command[command_len] = '\0'; // End of Filename
//         ESP_LOGI(TAG, "Requested command: %s", command);
//
//         TaskParams *params = malloc(sizeof(TaskParams));
//         if (params == NULL) {
//             printf("Memory allocation failed\n");
//             close(client_socket);
//             continue;
//         }
//
//         params->client_socket = client_socket;
//         params->filepath = filepath;
//
//         if (strcmp(command, "read") == 0) {
//             ESP_LOGE(TAG, "Beginning read task");
//             xTaskCreate(tcp_server_read, "Read Task", 4096, params, 5, NULL); // Registers task apparently 
//         } else if (strcmp(command, "write") == 0) {
//             ESP_LOGE(TAG, "Beginning write task");
//             xTaskCreate(tcp_server_write, "Write Task", 4096, params, 5, NULL);
//         } else if (strcmp(command, "delete") == 0) {
//             ESP_LOGE(TAG, "Beginning delete task");
//             xTaskCreate(tcp_server_delete, "Delete Task", 4096, params, 5, NULL);
//         } else {
//             free(params->filepath);
//             free(params);
//             close(client_socket);
//         }
//         ESP_LOGI(TAG, "Client disconnected\n");
//     }
// }
//
// void app_main() {
//     xTaskCreate(serverTask, "Server Task", 4096, NULL, 5, NULL);
// }
